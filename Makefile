# Makefile para AInstalia
# Proyecto de sistema multiagente para gesti√≥n empresarial con FastAPI

# Variables de configuraci√≥n
COMPOSE_FILE := docker-compose.yml
PROJECT_NAME := ainstalia
BACKEND_CONTAINER := $(PROJECT_NAME)_backend
POSTGRES_CONTAINER := $(PROJECT_NAME)_postgres
PGADMIN_CONTAINER := $(PROJECT_NAME)_pgadmin

# Colores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color
BLUE := \033[0;34m

.PHONY: help build up down restart status logs clean test dev prod backup restore

# Comando por defecto
.DEFAULT_GOAL := help

## üöÄ Comandos principales
help: ## Mostrar esta ayuda
	@echo "$(GREEN)Makefile para AInstalia - Sistema Multiagente$(NC)"
	@echo "$(BLUE)======================================================$(NC)"
	@echo ""
	@echo "$(YELLOW)Uso: make [comando]$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

build: ## üî® Construir todos los contenedores
	@echo "$(YELLOW)üî® Construyendo contenedores...$(NC)"
	docker compose -f $(COMPOSE_FILE) build

up: ## ‚¨ÜÔ∏è Levantar todos los servicios
	@echo "$(YELLOW)‚¨ÜÔ∏è Levantando servicios...$(NC)"
	docker compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Servicios levantados correctamente$(NC)"
	@echo "$(BLUE)üìñ API Docs: http://localhost:8001/docs$(NC)"
	@echo "$(BLUE)üêò PostgreSQL: http://localhost:5433$(NC)"
	@echo "$(BLUE)üéõÔ∏è PgAdmin: http://localhost:5051$(NC)"
	@echo "$(BLUE)   Email: admin@admin.com$(NC)"
	@echo "$(BLUE)   Password: admin$(NC)"
	@echo "$(GREEN)============================================$(NC)"

down: ## ‚¨áÔ∏è Bajar todos los servicios
	@echo "$(YELLOW)‚¨áÔ∏è Bajando servicios...$(NC)"
	docker compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Servicios detenidos correctamente$(NC)"

restart: ## üîÑ Reiniciar todos los servicios
	@echo "$(YELLOW)üîÑ Reiniciando servicios...$(NC)"
	docker compose -f $(COMPOSE_FILE) restart
	@echo "$(GREEN)‚úÖ Servicios reiniciados correctamente$(NC)"

## üìä Monitoreo y logs
status: ## üìä Ver estado de contenedores
	@echo "$(YELLOW)üìä Estado de contenedores:$(NC)"
	docker compose -f $(COMPOSE_FILE) ps

logs: ## üìã Ver logs de todos los servicios
	@echo "$(YELLOW)üìã Logs de todos los servicios:$(NC)"
	docker compose -f $(COMPOSE_FILE) logs --tail=50 -f

logs-backend: ## üìã Ver logs del backend
	@echo "$(YELLOW)üìã Logs del backend:$(NC)"
	docker logs -f $(BACKEND_CONTAINER)

logs-db: ## üìã Ver logs de PostgreSQL
	@echo "$(YELLOW)üìã Logs de PostgreSQL:$(NC)"
	docker logs -f $(POSTGRES_CONTAINER)

logs-pgadmin: ## üìã Ver logs de PgAdmin
	@echo "$(YELLOW)üìã Logs de PgAdmin:$(NC)"
	docker logs -f $(PGADMIN_CONTAINER)

## üîß Desarrollo
dev: ## üöÄ Modo desarrollo (build + up + logs)
	@echo "$(YELLOW)üöÄ Iniciando modo desarrollo...$(NC)"
	make build
	make up
	@echo "$(GREEN)‚úÖ Entorno de desarrollo listo$(NC)"
	@echo "$(BLUE)üîç Para ver logs: make logs$(NC)"

rebuild: ## üî® Reconstruir y levantar servicios
	@echo "$(YELLOW)üî® Reconstruyendo servicios...$(NC)"
	docker compose -f $(COMPOSE_FILE) up -d --build
	@echo "$(GREEN)‚úÖ Servicios reconstruidos y levantados$(NC)"

rebuild-backend: ## üî® Reconstruir solo el backend
	@echo "$(YELLOW)üî® Reconstruyendo backend...$(NC)"
	docker compose -f $(COMPOSE_FILE) up -d --build backend
	@echo "$(GREEN)‚úÖ Backend reconstruido$(NC)"

## üîç Debugging y acceso
shell-backend: ## üêö Acceso shell al contenedor backend
	@echo "$(YELLOW)üêö Accediendo al contenedor backend...$(NC)"
	docker exec -it $(BACKEND_CONTAINER) /bin/bash

shell-db: ## üêö Acceso shell a PostgreSQL
	@echo "$(YELLOW)üêö Accediendo a PostgreSQL...$(NC)"
	docker exec -it $(POSTGRES_CONTAINER) psql -U admin -d ainstalia_db

shell-pgadmin: ## üêö Acceso shell a PgAdmin
	@echo "$(YELLOW)üêö Accediendo al contenedor PgAdmin...$(NC)"
	docker exec -it $(PGADMIN_CONTAINER) /bin/bash

## üßπ Limpieza
clean: ## üßπ Limpiar contenedores, im√°genes y vol√∫menes
	@echo "$(YELLOW)üßπ Limpiando recursos Docker...$(NC)"
	docker compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -f
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

clean-all: ## üßπ Limpieza completa (incluye im√°genes)
	@echo "$(RED)‚ö†Ô∏è ATENCI√ìN: Esto eliminar√° TODAS las im√°genes Docker$(NC)"
	@read -p "¬øEst√°s seguro? [y/N]: " confirm && [ "$$confirm" = "y" ]
	docker compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -a -f
	@echo "$(GREEN)‚úÖ Limpieza completa realizada$(NC)"

## üß™ Testing y verificaci√≥n
test-api: ## üß™ Probar endpoints b√°sicos de la API
	@echo "$(YELLOW)üß™ Probando endpoints de la API...$(NC)"
	@echo "$(BLUE)üîç Health check:$(NC)"
	curl -s http://localhost:8001/ | jq . || echo "API no disponible"
	@echo "\n$(BLUE)üë• Clientes:$(NC)"
	curl -s http://localhost:8001/api/v1/clients/?limit=3 | jq '.[:3]' || echo "Endpoint de clientes no disponible"
	@echo "\n$(BLUE)üì¶ Productos:$(NC)"
	curl -s http://localhost:8001/api/v1/products/?limit=3 | jq '.[:3]' || echo "Endpoint de productos no disponible"

check-health: ## üè• Verificar salud de todos los servicios
	@echo "$(YELLOW)üè• Verificando salud de servicios...$(NC)"
	@echo "$(BLUE)Backend:$(NC)"
	@curl -s -o /dev/null -w "Status: %{http_code}\n" http://localhost:8001/ || echo "‚ùå Backend no responde"
	@echo "$(BLUE)PostgreSQL:$(NC)"
	@docker exec $(POSTGRES_CONTAINER) pg_isready -U admin -d ainstalia_db && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL no responde"
	@echo "$(BLUE)PgAdmin:$(NC)"
	@curl -s -o /dev/null -w "Status: %{http_code}\n" http://localhost:5051/ && echo "‚úÖ PgAdmin OK" || echo "‚ùå PgAdmin no responde"

## üìä Informaci√≥n del sistema
info: ## üìä Mostrar informaci√≥n del proyecto
	@echo "$(GREEN)üìä Informaci√≥n del Proyecto AInstalia$(NC)"
	@echo "$(BLUE)===============================================$(NC)"
	@echo "Proyecto: $(PROJECT_NAME)"
	@echo "Compose File: $(COMPOSE_FILE)"
	@echo ""
	@echo "$(YELLOW)üîó URLs de Servicios:$(NC)"
	@echo "  ‚Ä¢ API Backend: http://localhost:8001"
	@echo "  ‚Ä¢ API Docs: http://localhost:8001/docs"
	@echo "  ‚Ä¢ PostgreSQL: http://localhost:5433"
	@echo "  ‚Ä¢ PgAdmin: http://localhost:5051"
	@echo ""
	@echo "$(YELLOW)üì¶ Contenedores:$(NC)"
	@echo "  ‚Ä¢ Backend: $(BACKEND_CONTAINER)"
	@echo "  ‚Ä¢ PostgreSQL: $(POSTGRES_CONTAINER)"
	@echo "  ‚Ä¢ PgAdmin: $(PGADMIN_CONTAINER)"
	@echo ""
	@echo "$(YELLOW)üîë Credenciales PgAdmin:$(NC)"
	@echo "  ‚Ä¢ Email: admin@admin.com"
	@echo "  ‚Ä¢ Password: admin"

## üóÉÔ∏è Base de datos
db-backup: ## üíæ Backup de la base de datos
	@echo "$(YELLOW)üíæ Creando backup de la base de datos...$(NC)"
	@mkdir -p backups
	docker exec $(POSTGRES_CONTAINER) pg_dump -U admin ainstalia_db > backups/ainstalia_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup creado en backups/$(NC)"

db-restore: ## üì• Restaurar base de datos (requiere archivo)
	@echo "$(YELLOW)üì• Restaurando base de datos...$(NC)"
	@echo "$(RED)Uso: make db-restore FILE=backups/archivo.sql$(NC)"
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå Error: Especifica el archivo con FILE=ruta/archivo.sql$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "$(FILE)" ]; then \
		echo "$(RED)‚ùå Error: Archivo $(FILE) no encontrado$(NC)"; \
		exit 1; \
	fi
	docker exec -i $(POSTGRES_CONTAINER) psql -U admin ainstalia_db < $(FILE)
	@echo "$(GREEN)‚úÖ Base de datos restaurada$(NC)"

db-reset: ## üîÑ Reiniciar base de datos (recrear todas las tablas)
	@echo "$(RED)‚ö†Ô∏è ATENCI√ìN: Esto eliminar√° TODOS los datos$(NC)"
	@read -p "¬øEst√°s seguro? [y/N]: " confirm && [ "$$confirm" = "y" ]
	@echo "$(YELLOW)üîÑ Reiniciando base de datos...$(NC)"
	docker exec -i $(POSTGRES_CONTAINER) psql -U admin ainstalia_db < data/create_tables.sql
	@echo "$(GREEN)‚úÖ Base de datos reiniciada$(NC)"

## üìä Datos
load-data: ## üìä Cargar datos CSV a la base de datos
	@echo "$(YELLOW)üìä Cargando datos CSV...$(NC)"
	python scripts/load_data.py
	@echo "$(GREEN)‚úÖ Datos cargados correctamente$(NC)"

check-data: ## üîç Verificar datos en la base de datos
	@echo "$(YELLOW)üîç Verificando datos en la base de datos...$(NC)"
	@docker exec $(POSTGRES_CONTAINER) psql -U admin ainstalia_db -c "\
		SELECT 'clients' as tabla, count(*) as registros FROM clients UNION ALL \
		SELECT 'products', count(*) FROM products UNION ALL \
		SELECT 'technicians', count(*) FROM technicians UNION ALL \
		SELECT 'warehouses', count(*) FROM warehouses UNION ALL \
		SELECT 'installed_equipment', count(*) FROM installed_equipment UNION ALL \
		SELECT 'interventions', count(*) FROM interventions UNION ALL \
		SELECT 'contracts', count(*) FROM contracts UNION ALL \
		SELECT 'orders', count(*) FROM orders UNION ALL \
		SELECT 'order_items', count(*) FROM order_items UNION ALL \
		SELECT 'stock', count(*) FROM stock UNION ALL \
		SELECT 'knowledge_feedback', count(*) FROM knowledge_feedback UNION ALL \
		SELECT 'chat_sessions', count(*) FROM chat_sessions UNION ALL \
		SELECT 'chat_messages', count(*) FROM chat_messages;"

## üöÄ Entornos
prod: ## üöÄ Levantar en modo producci√≥n
	@echo "$(YELLOW)üöÄ Levantando en modo producci√≥n...$(NC)"
	docker compose -f $(COMPOSE_FILE) up -d --build
	@echo "$(GREEN)‚úÖ Entorno de producci√≥n levantado$(NC)"

## üìà Monitoreo avanzado
watch-logs: ## üëÄ Monitorear logs en tiempo real (filtrado)
	@echo "$(YELLOW)üëÄ Monitoreando logs (Ctrl+C para salir)...$(NC)"
	docker compose -f $(COMPOSE_FILE) logs -f | grep -E "(ERROR|WARNING|INFO|Started|Stopped)"

stats: ## üìà Estad√≠sticas de contenedores
	@echo "$(YELLOW)üìà Estad√≠sticas de contenedores:$(NC)"
	docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

## üîß Utilidades
update: ## üîÑ Actualizar im√°genes base
	@echo "$(YELLOW)üîÑ Actualizando im√°genes base...$(NC)"
	docker compose -f $(COMPOSE_FILE) pull
	@echo "$(GREEN)‚úÖ Im√°genes actualizadas$(NC)"

ports: ## üåê Mostrar puertos utilizados
	@echo "$(YELLOW)üåê Puertos utilizados por el proyecto:$(NC)"
	@echo "$(BLUE)AInstalia:$(NC)"
	@echo "  ‚Ä¢ 8000 - FastAPI Backend"
	@echo "  ‚Ä¢ 5432 - PostgreSQL"
	@echo "  ‚Ä¢ 5050 - PgAdmin"
	@echo "$(BLUE)Chatwoot:$(NC)"
	@echo "  ‚Ä¢ 3000 - Chatwoot Web"
	@echo "  ‚Ä¢ 6379 - Redis"


## üìö Documentaci√≥n
docs: ## üìö Abrir documentaci√≥n de la API
	@echo "$(YELLOW)üìö Abriendo documentaci√≥n de la API...$(NC)"
	@command -v xdg-open >/dev/null 2>&1 && xdg-open http://localhost:8001/docs || \
	command -v open >/dev/null 2>&1 && open http://localhost:8001/docs || \
	echo "$(BLUE)üìñ Visita: http://localhost:8001/docs$(NC)"

pgadmin: ## üéõÔ∏è Abrir PgAdmin en el navegador
	@echo "$(YELLOW)üéõÔ∏è Abriendo PgAdmin...$(NC)"
	@command -v xdg-open >/dev/null 2>&1 && xdg-open http://localhost:5051 || \
	command -v open >/dev/null 2>&1 && open http://localhost:5051 || \
	echo "$(BLUE)üéõÔ∏è Visita: http://localhost:5051$(NC)"
	@echo "$(BLUE)üìß Email: admin@admin.com$(NC)"
	@echo "$(BLUE)üîë Password: admin$(NC)"

## üéØ Comandos r√°pidos
quick-start: ## ‚ö° Inicio r√°pido AInstalia (clean + build + up)
	@echo "$(YELLOW)‚ö° Inicio r√°pido de AInstalia...$(NC)"
	make clean
	make build
	make up
	@echo "$(GREEN)‚úÖ AInstalia iniciado correctamente$(NC)"
	@echo "$(BLUE)üîç Verifica el estado con: make status$(NC)"

quick-start-full: ## ‚ö° Inicio r√°pido completo (AInstalia + Chatwoot)
	@echo "$(YELLOW)‚ö° Inicio r√°pido completo (AInstalia + Chatwoot)...$(NC)"
	make clean
	make build
	make up
	make chatwoot-up
	@echo "$(GREEN)‚úÖ Sistema completo iniciado$(NC)"
	@echo "$(BLUE)üíº AInstalia: http://localhost:8000$(NC)"
	@echo "$(BLUE)üí¨ Chatwoot: http://localhost:3000$(NC)"
	@echo "$(BLUE)üîç Verifica el estado con: make status$(NC)"

quick-test: ## ‚ö° Prueba r√°pida completa (up + test + data)
	@echo "$(YELLOW)‚ö° Prueba r√°pida completa...$(NC)"
	make up
	sleep 10
	make test-api
	make check-data
	@echo "$(GREEN)‚úÖ Prueba completa finalizada$(NC)"

stop-all: ## ‚èπÔ∏è Parar todos los contenedores de Docker
	@echo "$(YELLOW)‚èπÔ∏è Parando todos los contenedores de Docker...$(NC)"
	docker stop $$(docker ps -q) 2>/dev/null || echo "No hay contenedores ejecut√°ndose"
	@echo "$(GREEN)‚úÖ Todos los contenedores detenidos$(NC)"

## üß™ Testing y desarrollo
install-deps: ## üì¶ Instalar dependencias localmente
	@echo "$(YELLOW)üì¶ Instalando dependencias localmente...$(NC)"
	pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ Dependencias instaladas$(NC)"

format: ## üé® Formatear c√≥digo con black
	@echo "$(YELLOW)üé® Formateando c√≥digo...$(NC)"
	black backend/ scripts/
	@echo "$(GREEN)‚úÖ C√≥digo formateado$(NC)"

lint: ## üîç Verificar c√≥digo con flake8
	@echo "$(YELLOW)üîç Verificando c√≥digo...$(NC)"
	flake8 backend/ scripts/
	@echo "$(GREEN)‚úÖ C√≥digo verificado$(NC)"

## ü§ñ Comandos espec√≠ficos de AInstalia
init-db: ## üóÉÔ∏è Inicializar base de datos (crear tablas + cargar datos)
	@echo "$(YELLOW)üóÉÔ∏è Inicializando base de datos...$(NC)"
	make up
	sleep 5
	make load-data
	@echo "$(GREEN)‚úÖ Base de datos inicializada con datos$(NC)"
	@echo "$(BLUE)üéõÔ∏è Accede a PgAdmin: http://localhost:5051$(NC)"

agents-test: ## ü§ñ Probar agentes IA (cuando est√©n implementados)
	@echo "$(YELLOW)ü§ñ Probando agentes IA...$(NC)"
	@echo "$(BLUE)üîÆ Funcionalidad pendiente de implementar$(NC)"

whatsapp-test: ## üì± Probar integraci√≥n WhatsApp (cuando est√© implementada)
	@echo "$(YELLOW)üì± Probando integraci√≥n WhatsApp...$(NC)"
	@echo "$(BLUE)üîÆ Funcionalidad pendiente de implementar$(NC)"

## üí¨ Comandos espec√≠ficos de Chatwoot
chatwoot-up: ## üöÄ Levantar solo servicios de Chatwoot
	@echo "$(YELLOW)üöÄ Levantando servicios de Chatwoot...$(NC)"
	docker compose up -d postgres redis chatwoot-rails chatwoot-sidekiq	@echo "$(GREEN)‚úÖ Chatwoot levantado correctamente$(NC)"
	@echo "$(BLUE)üí¨ Chatwoot: http://localhost:3000$(NC)"

chatwoot-down: ## ‚¨áÔ∏è Bajar servicios de Chatwoot
	@echo "$(YELLOW)‚¨áÔ∏è Bajando servicios de Chatwoot...$(NC)"
	docker compose down chatwoot-rails chatwoot-sidekiq
	@echo "$(GREEN)‚úÖ Servicios de Chatwoot detenidos$(NC)"

chatwoot-logs: ## üìã Ver logs de Chatwoot
	@echo "$(YELLOW)üìã Logs de Chatwoot:$(NC)"
	docker compose logs -f chatwoot-rails chatwoot-sidekiq

chatwoot-console: ## üêö Acceso a consola Rails de Chatwoot
	@echo "$(YELLOW)üêö Accediendo a consola Rails de Chatwoot...$(NC)"
	docker exec -it chatwoot_rails bundle exec rails console

chatwoot-db-create: ## üóÉÔ∏è Crear base de datos de Chatwoot
	@echo "$(YELLOW)üóÉÔ∏è Creando base de datos de Chatwoot...$(NC)"
	docker exec chatwoot_rails bundle exec rails db:create
	@echo "$(GREEN)‚úÖ Base de datos de Chatwoot creada$(NC)"

chatwoot-db-migrate: ## üîÑ Ejecutar migraciones de Chatwoot
	@echo "$(YELLOW)üîÑ Ejecutando migraciones de Chatwoot...$(NC)"
	docker exec chatwoot_rails bundle exec rails db:migrate
	@echo "$(GREEN)‚úÖ Migraciones de Chatwoot ejecutadas$(NC)"

chatwoot-db-seed: ## üå± Poblar base de datos de Chatwoot con datos semilla
	@echo "$(YELLOW)üå± Poblando base de datos de Chatwoot...$(NC)"
	docker exec chatwoot_rails bundle exec rails db:seed
	@echo "$(GREEN)‚úÖ Base de datos de Chatwoot poblada$(NC)"

chatwoot-reset: ## üîÑ Reiniciar Chatwoot completamente
	@echo "$(YELLOW)üîÑ Reiniciando Chatwoot completamente...$(NC)"
	docker compose down chatwoot-rails chatwoot-sidekiq
	docker compose up -d chatwoot-rails chatwoot-sidekiq
	@echo "$(GREEN)‚úÖ Chatwoot reiniciado$(NC)"

chatwoot-status: ## üìä Ver estado espec√≠fico de servicios Chatwoot
	@echo "$(YELLOW)üìä Estado de servicios Chatwoot:$(NC)"
	docker compose ps | grep -E "(chatwoot|redis)"

chatwoot-test-email: ## üìß Probar configuraci√≥n de email
	@echo "$(YELLOW)üìß Probando configuraci√≥n de email...$(NC)"
	@echo "$(BLUE)üì¨ Configuraci√≥n usando Gmail SMTP$(NC)"

chatwoot-open: ## üåê Abrir Chatwoot en el navegador
	@echo "$(YELLOW)üåê Abriendo Chatwoot...$(NC)"
	@command -v xdg-open >/dev/null 2>&1 && xdg-open http://localhost:3000 || \
	command -v open >/dev/null 2>&1 && open http://localhost:3000 || \
	echo "$(BLUE)üí¨ Visita: http://localhost:3000$(NC)"
	@echo "$(BLUE)üìß Email: admin@ainstalia.com$(NC)"
	@echo "$(BLUE)üîë Password: Password123!$(NC)"

## üîß Configuraci√≥n de entorno
setup-env: ## ‚öôÔ∏è Configurar archivo .env desde .env.example
	@echo "$(YELLOW)‚öôÔ∏è Configurando archivo .env...$(NC)"
	@if [ ! -f .env ]; then \
		cp .env.example .env; \
		echo "$(GREEN)‚úÖ Archivo .env creado desde .env.example$(NC)"; \
		echo "$(BLUE)üìù Edita .env con tus configuraciones reales$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è El archivo .env ya existe$(NC)"; \
	fi

setup-pgadmin: ## üéõÔ∏è Configurar conexi√≥n de PgAdmin a PostgreSQL
	@echo "$(YELLOW)üéõÔ∏è Configurando PgAdmin...$(NC)"
	@echo "$(BLUE)üìã Pasos para conectar PgAdmin a PostgreSQL:$(NC)"
	@echo "$(GREEN)1.$(NC) Abre http://localhost:5051"
	@echo "$(GREEN)2.$(NC) Login: admin@admin.com / admin"
	@echo "$(GREEN)3.$(NC) Click derecho en 'Servers' ‚Üí Create ‚Üí Server"
	@echo "$(GREEN)4.$(NC) General tab ‚Üí Name: AInstalia"
	@echo "$(GREEN)5.$(NC) Connection tab:"
	@echo "   ‚Ä¢ Host: postgres"
	@echo "   ‚Ä¢ Port: 5432"
	@echo "   ‚Ä¢ Database: ainstalia_db"
	@echo "   ‚Ä¢ Username: user"
	@echo "   ‚Ä¢ Password: password"
	@echo "$(GREEN)6.$(NC) Click 'Save'" 