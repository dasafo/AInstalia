services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ainstalia_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/data
      - ./data/create_tables.sql:/docker-entrypoint-initdb.d/01-create_tables.sql
    networks:
      - ainstalia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin para gestión de PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ainstalia_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ainstalia_network

  # Aplicación FastAPI
  backend:
    build: .
    container_name: ainstalia_backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
      ENVIRONMENT: ${ENVIRONMENT}
      DEBUG: ${DEBUG}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    ports:
      - "${API_PORT}:8000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ainstalia_network
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
  pgadmin_data:

networks:
  ainstalia_network:
    driver: bridge 